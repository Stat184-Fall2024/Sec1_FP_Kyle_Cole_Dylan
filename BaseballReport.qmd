---
title: "Baseball Report"
author: "Kyle Gilbert, Cole Kvasnak, Dylan Van Berkel"
highlight-style: github
format:
  html:
    code-fold: true
  pdf:
    geometry: 
      - top=30mm
      - left=30mm
editor: visual
---

```{r}
#| label: load-pkgs
#| code-summary: "Packages"
#| message: false
#| echo: false

# This code will be using the tidyverse style guide

# Load necessary packages
library(tidyverse)
library(knitr)
library(kableExtra)
```

```{r}
#| label: load-datasets
#| echo: false

# Set working directory to path to repo (uncomment if needed)
#setwd("~/path/to/repo")

# Read in data -------------------------------------
master_raw <- read.csv("data/Master.csv")
salaries_raw <- read.csv("data/Salaries.csv")
batting_raw <- read.csv("data/Batting.csv")
pitching_raw <- read.csv("data/Pitching.csv")
fielding_raw <- read.csv("data/Fielding.csv")
teams_raw <- read.csv("data/Teams.csv")
cpi_raw <- read.csv("data/CPI_data.csv")
```

```{r}
#| label: data-wrangling
#| echo: false

### Computing wins above replacement (WAR) -------------------------------------

## Position players

# Using Baseball Reference's definition of WAR (bWAR):
# - https://www.baseball-reference.com/about/war_explained.shtml
# - https://www.baseball-reference.com/about/war_explained_position.shtml
# - https://www.baseball-reference.com/about/war_explained_pitch.shtml

# Constant for average number of runs per win, Baseball Reference assumes this is 10 
AVG_RUNS_PER_WIN <- 10

# Filter teams table to 21st century
teams <- teams_raw %>%
  filter(yearID > 1999)

# Select park factors
teams_bpf <- teams %>%
  select(yearID, teamID, BPF) # Batting park factor

teams_ppf <- teams %>%
  select(yearID, teamID, PPF) # Pitching park factor

# Join park factors to batting and pitching tables by year and team
batting_with_bpf <- left_join(batting_raw, teams_bpf, by = c("yearID", "teamID"))
pitching_with_ppf <- left_join(pitching_raw, teams_ppf, by = c("yearID", "teamID"))

# Compute the league average runs per at-bat
avg_runs_per_ab <- mean(teams$R / teams$AB)
# Replacement level is defined as scoring 80% of the league average runs per at-bat
replacement_level_runs_per_ab <- avg_runs_per_ab * 0.8

# Compute bWAR for 21st century Yankees hitters
nyy_batting <- batting_with_bpf %>%
  # Filter cases to 21st century Yankees players
  filter(yearID > 1999 & teamID == "NYA") %>%
  # Add columns for the WAR computation
  mutate(
    TB = H + X2B + 2 * X3B + 3 * HR, # total bases (TB)
    RC = ifelse((AB + BB) > 0, (H + BB) * TB / (AB + BB), 0), # runs created (RC)
    replacement_level_runs = replacement_level_runs_per_ab * AB, # replacement runs
    runs_above_replacement = RC - replacement_level_runs, # runs above replacement
    WAR = runs_above_replacement / AVG_RUNS_PER_WIN # bWAR
  ) %>%
  # Sort by descending WAR
  arrange(desc(WAR))


## Pitchers

# Compute league average runs allowed per 9 innings
lg_RA9 <- (sum(teams$RA) / sum(teams$IPouts / 3)) * 9
# Replacement level is defined as allowing 20% more runs per 9 innings than the league average
replacement_RA9 <- lg_RA9 * 1.2

# Compute bWAR for 21st century Yankees pitchers
nyy_pitching <- pitching_with_ppf %>%
  # Filter cases to 21st century Yankees players
  filter(yearID > 1999 & teamID == "NYA") %>%
  # Add columns for the WAR computation
  mutate(
    RA9 = (R / (IPouts / 3)) * 9, # runs allowed per 9 innings
    RA9_adj = RA9 * (PPF / 100), # runs allowed per 9 innings, adjusted for home ballpark
    WAR = (replacement_RA9 - RA9_adj) * ((IPouts / 3) / 9) / AVG_RUNS_PER_WIN, # bWAR
  ) %>%
  # Sort by descending WAR
  arrange(desc(WAR))

### Computing other common statistics -------------------------------------

## Position players

# Compute league on-base percentage (OBP)
lg_obp <- (sum(teams$H) + sum(teams$BB) + sum(teams$HBP)) / (sum(teams$AB) + sum(teams$BB) + sum(teams$HBP) + sum(teams$SF))
# Compute league slugging percentage (SLG)
lg_slg <- ((sum(teams$H) - (sum(teams$X2B) + sum(teams$X3B) + sum(teams$HR))) + (2 * sum(teams$X2B)) + (3 * sum(teams$X3B)) + (4 * sum(teams$HR))) / sum(teams$AB)
# Compute league on-base plus slugging (OPS)
lg_ops <- lg_obp + lg_slg

# Add statistics to batting dataframe
nyy_batting <- nyy_batting %>%
  mutate(
    BA = H / AB, # batting average (BA)
    OBP = (H + BB + HBP) / (AB + BB + HBP + SF), # on-base percentage (OBP)
    SLG = ((H - (X2B + X3B + HR)) + (2 * X2B) + (3 * X3B) + (4 * HR)) / AB, # slugging percentage (SLG)
    OPS = OBP + SLG, # on-base plus slugging (OPS)
    OPS_plus = (100 * (OPS / lg_ops) / (BPF / 100)) # OPS+ adjusted for league
  ) %>%
  # Round columns to 3 decimal places
  mutate(
    WAR = round(WAR, 3),
    BA = round(BA, 3),
    OBP = round(OBP, 3),
    SLG = round(SLG, 3),
    OPS = round(OPS, 3),
    OPS_plus = round(OPS_plus, 3)
  ) %>%
  select(playerID, yearID, teamID, WAR, BA, OBP, SLG, OPS, OPS_plus)

## Pitchers

# Add extra statistics to pitching dataframe
nyy_pitching <- nyy_pitching %>%
  mutate(
    WHIP = (BB + H) / (IPouts / 3), # walks and hits per inning pitched (WHIP)
    K_per_9 = (SO * 9) / (IPouts / 3), # strikeouts per 9 innings (K9)
    BB_per_9 = (BB * 9) / (IPouts / 3) # walks per 9 innings (BB9)
  ) %>%
  # Round columns to 3 decimal places
  mutate(
    WAR = round(WAR, 3),
    WHIP = round(WHIP, 3),
    K_per_9 = round(K_per_9, 3),
    BB_per_9 = round(BB_per_9, 3)
  ) %>%
  select(playerID, yearID, teamID, WAR, ERA, WHIP, K_per_9, BB_per_9)


### Joining tables to create the main dataframes -------------------------------------

## Add salary column

# Adjust salaries for inflation using CPI
cpi_data <- cpi_raw %>%
  mutate(
    cpi = (Jan + Feb + Mar + Apr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec) / 12
  ) %>%
  select(Year, cpi)

# Base CPI is for the year 2015
base_cpi <- cpi_data$cpi[cpi_data$Year == 2015]

# Clean and adjust salaries for inflation
salaries <- salaries_raw %>%
  filter(yearID > 1999 & teamID == "NYA") %>%
  left_join(cpi_data, by = c("yearID" = "Year")) %>%
  mutate(
    salary_adj = round(salary * (base_cpi / cpi))
  ) %>%
  select(-lgID, -cpi)

# Add salary and adjusted salary columns to batting and pitching dataframes
nyy_batting <- inner_join(nyy_batting, salaries, by = c("yearID", "teamID", "playerID"))
nyy_pitching <- inner_join(nyy_pitching, salaries, by = c("yearID", "teamID", "playerID"))

## Add position column

# Clean the fielding dataframe
fielding <- fielding_raw %>%
  select(yearID, teamID, playerID, POS, G) %>%
  group_by(yearID, teamID, playerID) %>%
  filter(G == max(G)) %>%
  slice(1) %>%
  ungroup() %>%
  select(-G) %>%
  filter(yearID > 1999 & teamID == "NYA")

# Add position column to batting and pitching dataframes
nyy_batting <- inner_join(nyy_batting, fielding, by = c("yearID", "teamID", "playerID"))
nyy_pitching <- inner_join(nyy_pitching, fielding, by = c("yearID", "teamID", "playerID"))

# Filter out non-pitchers from the pitching dataframe
nyy_pitching <- nyy_pitching %>%
  filter(POS == "P")

## Add name column

# Clean the master dataset
master <- master_raw %>%
  mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
  select(playerID, name)

# Add name column to batting and pitching dataframes
nyy_batting <- inner_join(nyy_batting, master, by = "playerID")
nyy_pitching <- inner_join(nyy_pitching, master, by = c("playerID" = "playerID"))

# Filter out pitchers from batting dataframe
nyy_batting <- nyy_batting %>%
  filter(POS != "P") %>%
  select(yearID, teamID, playerID, name, POS, WAR, BA, OBP, SLG, OPS, OPS_plus, salary, salary_adj)

nyy_pitching <- nyy_pitching %>%
  select(yearID, teamID, playerID, name, POS, WAR, ERA, WHIP, K_per_9, BB_per_9, salary, salary_adj)

# Create a team dataframe for easier data aggregation across the team for data analysis
nyy_team <- full_join(nyy_batting, nyy_pitching, by = c("yearID", "teamID", "playerID", "name", "POS", "WAR", "salary", "salary_adj"))
```

```{r}
#| label: data-visualizations
#| echo: false

## Individual salaries vs individual performance -------------------------------------

# Density plot of adjusted salary
nyy_team %>%
  ggplot(aes(x = salary_adj / 1e6)) + 
  geom_density(fill = "lightblue", alpha = 0.5) +
  labs(title = expression(bold("Distribution of Adjusted Annual Salaries")), 
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")), 
       y = expression(bold("Density"))) +
  scale_x_continuous(
    breaks = c(0, 5, 10, 15, 20, 25, 30),
    labels = c("$0M", "$5M", "$10M", "$15M", "$20M", "$25M", "$30M")
  ) +
  theme_linedraw()

## Analyze correlation between salary and batting statistics ---------------------------------

# Salary_adj plotted on log scale

# WAR vs Adjusted Salary
nyy_batting %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = WAR)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Wins Above Replacement (WAR) vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("Wins Above Replacement (WAR)"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  theme_linedraw()

# BA vs Adjusted Salary
nyy_batting %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = BA)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Batting Average (BA) vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("Batting Average (BA)"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  scale_y_continuous(limits = c(0.1, 0.4)) +
  theme_linedraw()

# OPS+ vs Adjusted Salary
nyy_batting %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = OPS_plus)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("OPS+ vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("OPS+"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  scale_y_continuous(limits = c(25, 175)) +
  theme_linedraw()

## Analyze correlation between salary and pitching statistics -------------------------------

# Salary_adj plotted on log scale

# WAR vs Adjusted Salary
nyy_pitching %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = WAR)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Wins Above Replacement (WAR) vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("Wins Above Replacement (WAR)"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  theme_linedraw()

# ERA vs Adjusted Salary
nyy_pitching %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = ERA)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Earned Run Average (ERA) vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("Earned Runs Average (ERA)"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  scale_y_continuous(limits = c(0, 12)) +
  theme_linedraw()

# WHIP vs Adjusted Salary
nyy_pitching %>%
  ggplot(aes(x = log10(salary_adj / 1e6), y = WHIP)) + 
  geom_point(color = "steelblue") + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Walks & Hits per Inning Pitched (WHIP) vs Adjusted Annual Salary")),
       x = expression(bold("Adjusted Annual Salary (in Millions $USD)")),
       y = expression(bold("Walks & Hits per Inning Pitched (WHIP)"))) +
  scale_x_continuous(
    breaks = c(-0.5, 0, 0.5, 1, 1.5),
    labels = c("$316k", "$1M", "$3.16M", "$10M", "$31.6M")
  ) +
  theme_linedraw()

## Analyze correlations between variables -------------------------------------

# Create correlation matrix between metrics and salaries for batters and pitchers

# Batters
nyy_batting_renamed <- nyy_batting %>%
  rename(
    "OPS+" = "OPS_plus",
    "Adjusted Salary" = "salary_adj"
  )
cor_batting_df <- nyy_batting_renamed %>%
  select(WAR, BA, `OPS+`, `Adjusted Salary`) %>%
  cor(use = "complete.obs") %>%
  as.data.frame() %>%
  mutate(Variable1 = rownames(.)) %>%
  pivot_longer(
    cols = -Variable1,
    names_to = "Variable2",
    values_to = "Correlation"
  )

# Pitchers
nyy_pitching_renamed <- nyy_pitching %>%
  rename(
    "Adjusted Salary" = "salary_adj"
  )
cor_pitching_df <- nyy_pitching_renamed %>%
  select(WAR, ERA, WHIP, `Adjusted Salary`) %>%
  cor(use = "complete.obs") %>%
  as.data.frame() %>%
  mutate(Variable1 = rownames(.)) %>%
  pivot_longer(
    cols = -Variable1,
    names_to = "Variable2",
    values_to = "Correlation"
  )

## Create heatmaps to show correlations between variables -------------------------------------

# Batters
cor_batting_df %>%
  ggplot(aes(x = Variable1, y = Variable2, fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "white", mid = "lightblue", high = "darkblue", midpoint = 0) +
  labs(title = expression(bold("Correlations Between Batting Metrics")), fill = "Correlation") +
  theme_linedraw() +
  theme(axis.text.x = element_text(face = "bold"),
        axis.text.y = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

# Pitchers
cor_pitching_df %>%
  ggplot(aes(x = Variable1, y = Variable2, fill = Correlation)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "white", mid = "lightblue", high = "darkblue", midpoint = 0) +
  labs(title = expression(bold("Correlations Between Pitching Metrics")), fill = "Correlation") +
  theme_linedraw() +
  theme(axis.text.x = element_text(face = "bold"),
        axis.text.y = element_text(face = "bold"),
        axis.title.x = element_blank(),
        axis.title.y = element_blank())

## Spending over time vs performance over time -------------------------------------

# Group batting by year and summarize salary
nyy_batting_by_year <- nyy_batting %>%
  group_by(yearID) %>%
  summarize(batting_salary_sum = sum(salary_adj, na.rm = TRUE), .groups = "drop")

# Group pitching by year and summarize salary
nyy_pitching_by_year <- nyy_pitching %>%
  group_by(yearID) %>%
  summarize(pitching_salary_sum = sum(salary_adj, na.rm = TRUE), .groups = "drop")

# Join batting and pitching by year and calculate total salary
nyy_salary_by_year <- nyy_batting_by_year %>%
  full_join(nyy_pitching_by_year, by = "yearID") %>%
  mutate(total_salary = batting_salary_sum + pitching_salary_sum)

# Combine batting and pitching into a team dataframe giving salary by year
team_performance <- teams %>%
  filter(teamID == "NYA") %>%
  select(yearID, teamID, W) %>%
  left_join(nyy_salary_by_year, by = "yearID") %>%
  select(yearID, teamID, W, total_salary) %>%
  mutate(total_salary = total_salary / 1e6)

# Plot total team wins vs team salary
team_performance %>%
  ggplot(aes(x = total_salary, y = W)) + 
  geom_point(color = "steelblue", size = 3) + 
  geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "solid") +
  labs(title = expression(bold("Total Wins vs Team Salary")),
       x = expression(bold("Adjusted Team Yearly Salary (in Millions $USD)")),
       y = expression(bold("Total Wins"))) +
  theme_linedraw()

## Average Salary by Position -------------------------------------

# Get dataframe of salary by position
salary_by_position <- nyy_team %>%
  group_by(POS) %>%
  summarize(avg_salary = mean(salary_adj, na.rm = TRUE), .groups = "drop") %>%
  mutate(avg_salary = avg_salary / 1e6) %>%
  arrange(desc(avg_salary))

# Create a bar chart plotting the average salaries
salary_by_position %>%
  ggplot(aes(x = reorder(POS, -avg_salary), y = avg_salary, fill = POS)) +
  geom_bar(stat = "identity", fill = "steelblue", show.legend = FALSE) +
  labs(title = expression(bold("Average Annual Adjusted Salary by Position")),
       x = expression(bold("Position")),
       y = expression(bold("Average Annual Adjusted Salary (in Millions $USD)"))) +
  theme_linedraw() +
  theme(axis.text.x = element_text())

## Over and under performers: WAR / $ -------------------------------------

# Over performers
top_10_over_performers <- nyy_team %>%
  mutate(WAR_per_dollar = (WAR * 1e6) / salary_adj) %>%
  arrange(desc(WAR_per_dollar)) %>%
  slice_head(n = 10)

# Under performers
top_10_under_performers <- nyy_team %>%
  mutate(WAR_per_dollar = (WAR * 1e6) / salary_adj) %>%
  arrange(WAR_per_dollar) %>%
  slice_head(n = 10)

# Over performers table
top_10_over_table <- top_10_over_performers %>%
  select(yearID, name, POS, WAR, salary_adj, WAR_per_dollar) %>%
  kable(col.names = c("Year", "Player", "Position", "WAR", "Salary ($USD)", "WAR / $"),
        caption = "<b><span style='color:black;'>Top 10 Over Performers (Lowest WAR per $)</span></b>",
        digits = c(0, 0, 0, 2, 0, 2)) %>%
  kable_styling(bootstrap_options = c("striped", "condensed", "bordered"))

# Under performers table
top_10_under_table <- top_10_under_performers %>%
  select(yearID, name, POS, WAR, salary_adj, WAR_per_dollar) %>%
  kable(col.names = c("Year", "Player", "Position", "WAR", "Salary ($USD)", "WAR / $"),
        caption = "<b><span style='color:black;'>Top 10 Under Performers (Lowest WAR per $)</span></b>",
        digits = c(0, 0, 0, 2, 0, 2)) %>%
  kable_styling(bootstrap_options = c("striped", "condensed", "bordered"))

# Show tables
top_10_over_table
top_10_under_table
```

## Overview

Overview of the project. Research questions.

## Datasets

Explain datasets used: where did we get the data, who collected the data, for what purpose, who/ what are cases.

FAIR and CARE Principles

## Background

Give background information, stats used, WAR calculation definitions, etc.

## Data Analysis

EDA, all plots and analysis section. Explain patterns found from the data.

## Conclusion

Explain results/ takeaways of the analysis. Make recommendations to the Yankees as a result of the data analysis

## References

Cite sources

**#Project Description:**

The goal of this final R project is to analyze the percentage of a team's salary cap allocated to specific players from 2000 to now and to explore the factors driving these players' compensation levels.

**Questions to answer:**

-   **Player Salary Insights**

    -   How does the percentage of salary cap each player earns correlate with their performance metrics (e.g., batting average, home runs, WAR)?

    -   What is the distribution of salaries across different positions (pitcher, catcher, etc.) for the Yankees compared to other teams?

-   **Team-Level Analysis**

    -   How does the Yankees' average player salary compare to that of other MLB teams?

    -   What percentage of the Yankees' salary cap is spent on top-performing players compared to the league average?

-   **Historical Trends**

    -   How has the percentage of the salary cap allocated to top-paid players changed over the years for the Yankees and other teams?

    -   Are there trends in salary allocation related to team performance in playoffs or championships?

-   **Position-Based Analysis**

    -   Are certain positions (e.g., pitchers, shortstops) allocated a higher percentage of the salary cap across MLB teams? How does this compare with the Yankees?

    -   Do players in specific positions receive more or less than their performance justifies?

-   **Team Strategy Insights**

    -   Does a higher percentage of salary cap spent on star players correlate with better overall team performance?

    -   How do the Yankees' salary allocation strategies compare to teams with similar or better performance records?

-   **League-Wide Comparisons**

    -   How do the Yankees rank in terms of salary cap utilization efficiency compared to other MLB teams?

    -   Are there any anomalies or outliers in salary allocations across the league?

-   **Contract Lengths and Salaries**

    -   Do longer contracts for Yankees players correlate with a higher percentage of the salary cap allocation?

    -   How does contract length influence the perceived value of players?

-   **Demographics and Salaries**

    -   Are there correlations between player age, experience, or nationality and the percentage of the salary cap they receive?

    -   How do rookie salaries as a percentage of salary caps compare between the Yankees and other teams?

-   **Revenue vs. Salaries**

    -   Does the Yankees' revenue have a stronger correlation with salary cap allocations compared to other teams?

    -   How does team revenue impact the overall spending strategy on players?
